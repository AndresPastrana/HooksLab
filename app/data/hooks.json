[
  {
    "name": "useDebounce",
    "description": "Debounce rapidly changing values"
  },
  {
    "name": "useFetch",
    "description": "Fetch data from a remote API"
  },
  {
    "name": "useCache",
    "description": "Cache frequently used data"
  },
  {
    "name": "use Throttle",
    "description": "Throttle function calls to prevent overwhelming the server"
  },
  {
    "name": "useMemo",
    "description": "Memoize a function's output so it's not recalculated every render"
  },
  {
    "name": "useLayoutEffect",
    "description": "Run an effect after all DOM mutations are completed"
  },
  {
    "name": "useImperativeHandle",
    "description": "Attach an imperative handle to a component"
  },
  {
    "name": "useReducer",
    "description": "Manage local state with a reducer function"
  },
  {
    "name": "useContext",
    "description": "Get the current context value for a given context"
  },
  {
    "name": "useCallback",
    "description": "Memoize a function so it's not recreated on every render"
  },
  {
    "name": "usememo",
    "description": "Cache the result of a slow function so it's not recalculated every render"
  }
]