{
  "useDebounce": {
    "code": "import { useState, useEffect } from 'react';\n\nfunction useDebounce(value, delay) {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}",
    "desc": "Debounce rapidly changing values"
  },
  "useDidMount": {
    "code": "import { useEffect } from 'react';\n\nfunction useDidMount(callback) {\n  useEffect(() => {\n    callback();\n  }, []);\n}",
    "desc": "Call a function after component mounts"
  },
  "useIsMounted": {
    "code": "import { useRef, useEffect } from 'react';\n\nfunction useIsMounted() {\n  const isMounted = useRef(false);\n\n  useEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  return isMounted;\n}",
    "desc": "Check if the component is still mounted"
  },
  "usePrevious": {
    "code": "import { useRef, useEffect } from 'react';\n\nfunction usePrevious(value) {\n  const ref = useRef();\n\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n\n  return ref.current;\n}",
    "desc": "Get the previous value of a prop or state"
  },
  "useToggle": {
    "code": "import { useState } from 'react';\n\nfunction useToggle(initialValue = false) {\n  const [state, setState] = useState(initialValue);\n\n  const toggle = () => setState((prev) => !prev);\n\n  return [state, toggle];\n}",
    "desc": "Toggle a boolean value"
  },
  "useTimeout": {
    "code": "import { useEffect, useRef } from 'react';\n\nfunction useTimeout(callback, delay) {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (delay === null) return;\n\n    const id = setTimeout(() => savedCallback.current(), delay);\n\n    return () => clearTimeout(id);\n  }, [delay]);\n}",
    "desc": "Run a function after a specified delay"
  },
  "useInterval": {
    "code": "import { useEffect, useRef } from 'react';\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (delay === null) return;\n\n    const id = setInterval(() => savedCallback.current(), delay);\n\n    return () => clearInterval(id);\n  }, [delay]);\n}",
    "desc": "Run a function at specified intervals"
  },
  "useLocalStorage": {
    "code": "import { useState } from 'react';\n\nfunction useLocalStorage(key, initialValue) {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.error(error);\n      return initialValue;\n    }\n  });\n\n  const setValue = (value) => {\n    try {\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}",
    "desc": "Manage state with localStorage persistence"
  }
}